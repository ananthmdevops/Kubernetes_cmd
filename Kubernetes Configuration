
# download ubuntu from https://ubuntu.com/download/desktop   
# Ubuntu 20.10 - Version used 

----->    sudo apt update
----->    apt install net-tools 


*******Install SSH for Putty******* #FROM <https://askubuntu.com/questions/760378/can-not-install-openssh-server-on-ubuntu-16-04> 
sudo apt install openssh-server         <------ Install SSHD 

---> systemctl status sshd
---> sudo ufw allow ssh  ----For firewall enable on port 22

1) Disable Swap
## By disabling swapping, you will also prevent memory algorithms from doing unnecessary operation - moving data from RAM to swap and vice versa - in case of SSD this will prevent excessive wear. And in any case this will improve the performance by eliminating unnecessary operations
https://superuser.com/questions/810170/should-i-disable-swap-file-if-i-have-lots-of-ram-or-should-i-move-it-to-a-virtua#:~:text=By%20disabling%20swapping%2C%20you%20will,performance%20by%20eliminating%20unnecessary%20operations.
   ============
--->  sudo swapoff -a

#(put sign # at the beginning on the UUID of swap partition)

----> sudo nano /etc/fstab 



2) Letting iptables see bridged traffic (br_netfilter module should be loaded)
Make sure that the br_netfilter module is loaded. This can be done by running lsmod | grep br_netfilter. To load it explicitly call sudo modprobe br_netfilter.
As a requirement for your Linux Node's iptables to correctly see bridged traffic, you should ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl config, e.g.
   ===========================================================================

---> lsmod | grep br_netfilter
---> modprobe br_netfilter
---> lsmod | grep br_netfilter

---> cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

---->  sudo sysctl --system

#sysctl is a software utility of some Unix-like operating systems that reads 
#and modifies the attributes of the system kernel such as its version number, 
#maximum limits, and security settings.


3) Container runtime (Docker)
   ==========================

Reference:
# https://v1-18.docs.kubernetes.io/docs/setup/production-environment/container-runtimes/
# https://docs.docker.com/engine/install/ubuntu/
---------

# (Install Docker CE)
## Set up the repository:
### Install packages to allow apt to use a repository over HTTPS
-----------------------------------------------------------------

sudo apt-get update && sudo apt-get install -y \
  sudo apt-transport-https ca-certificates curl software-properties-common gnupg2

# Add Dockerâ€™s official GPG key:
--------------------------------

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

# Add the Docker apt repository:
-------------------------------
sudo add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"

sudo apt-cache madison docker-ce
sudo apt-get  update
sudo apt-cache madison docker-ce | grep 18.06
sudo apt-cache madison docker-ce | grep 18.06.3*
sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu -y  <----**Note**--- if this doesnt work use the install command below

sudo docker version

**********Alternate command to download Docker****************************
apt-get update && apt-get install -y \
  containerd.io=1.2.13-2 \
  docker-ce=5:19.03.11~3-0~ubuntu-$(lsb_release -cs) \
  docker-ce-cli=5:19.03.11~3-0~ubuntu-$(lsb_release -cs)
****************************************************

# Set up the Docker daemon
---------------------------

cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

# Restart Docker
----------------
systemctl daemon-reload
systemctl enable docker
systemctl restart docker

4) Installing kubeadm, kubelet and kubectl
   =======================================

sudo apt-get update && sudo apt-get install -y apt-transport-https curl
sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

sudo apt-get update
sudo apt-cache policy kubeadm | grep 1.18


sudo apt-get install -y kubelet=1.18.8-00 kubeadm=1.18.8-00 kubectl=1.18.8-00
sudo apt-mark hold kubelet kubeadm kubectl

Note: For latest version, use sudo apt-get install -y kubelet kubeadm kubectl 
---- 

5) Initialized time synchronization

sudo timedatectl


sudo timedatectl list-timezones | grep " Whatever your city and state is"
sudo timedatectl set-timezone America/Los_Angeles
shutdown now

*************************************************************************
To initialize the control-plane node run:
-----> sudo kubeadm init


####- To Check if the nodes are available ##

---> kubectl cluster-info
---> kubectl get nodes

*****************Integrating Kubernetes via the Addon------> Weave Net creates a virtual network*****

#https://www.weave.works/docs/net/latest/kubernetes/kube-addon/

Weave Net creates a virtual network that connects Docker containers across multiple hosts and enables their automatic discovery.
With Weave Net, portable microservices-based applications consisting of multiple containers can run anywhere:
on one host, multiple hosts or even across cloud providers and data centers.
Applications use the network just as if the containers were all plugged into the same network switch, without having to configure port mappings, ambassadors or links.

----> kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"


***************Misc..Command****to troubleshoot network error***
cat /etc/network/interfaces **** 
*********************************************
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface

auto enp0s8
iface enp0s8 inet static
address XXX.XXX.XXX.XXX
netmask 255.255.255.0


*********************************


kubeadm join XXX.XXX.XXX.XXX2:6443 --token ********     --discovery-token-ca-cert-hash sha256:58ee813e3f24029d6af2ef8c4f73200d402089c2ad61e7925e8904bd2eef39dc 

kubeadm token list
kubeadm token delete "token number" 
kubeadm token create --print-join-command



